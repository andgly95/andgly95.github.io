{"version":3,"sources":["webpack:///./src/app/modules/user-management/components/change-password/change-password.component.html","webpack:///./src/app/modules/user-management/components/change-password/change-password.component.ts","webpack:///./src/app/modules/user-management/components/personal-info/personal-info.component.html","webpack:///./src/app/modules/user-management/components/personal-info/personal-info.component.ts","webpack:///./src/app/modules/user-management/models/account-recovery-view.model.ts","webpack:///./src/app/modules/user-management/models/change-password-form.ts","webpack:///./src/app/modules/user-management/models/forgot-password-view.model.ts","webpack:///./src/app/modules/user-management/models/personal-info-form.ts","webpack:///./src/app/modules/user-management/models/reset-password-form.model.ts","webpack:///./src/app/modules/user-management/models/reset-password-view.model.ts","webpack:///./src/app/modules/user-management/pages/account-recovery/account-recovery.component.html","webpack:///./src/app/modules/user-management/pages/account-recovery/account-recovery.component.scss","webpack:///./src/app/modules/user-management/pages/account-recovery/account-recovery.component.ts","webpack:///./src/app/modules/user-management/pages/confirm-registration/confirm-registration.component.html","webpack:///./src/app/modules/user-management/pages/confirm-registration/confirm-registration.component.scss","webpack:///./src/app/modules/user-management/pages/confirm-registration/confirm-registration.component.ts","webpack:///./src/app/modules/user-management/pages/reset-password/reset-password.component.html","webpack:///./src/app/modules/user-management/pages/reset-password/reset-password.component.scss","webpack:///./src/app/modules/user-management/pages/reset-password/reset-password.component.ts","webpack:///./src/app/modules/user-management/pages/user-account/user-account.component.html","webpack:///./src/app/modules/user-management/pages/user-account/user-account.component.scss","webpack:///./src/app/modules/user-management/pages/user-account/user-account.component.ts","webpack:///./src/app/modules/user-management/services/user-management.service.ts","webpack:///./src/app/modules/user-management/user-management-routing.module.ts","webpack:///./src/app/modules/user-management/user-management.component.html","webpack:///./src/app/modules/user-management/user-management.component.scss","webpack:///./src/app/modules/user-management/user-management.component.ts","webpack:///./src/app/modules/user-management/user-management.module.ts"],"names":[],"mappings":"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","file":"modules-user-management-user-management-module.js","sourcesContent":["module.exports = \"<form [formGroup]=\\\"changePasswordForm\\\" (submit)=\\\"saveChangePasswordForm()\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-6\\\">\\r\\n      <div class=\\\"form-group m-form__group row\\\">\\r\\n        <label class=\\\"col-12 col-form-label\\\">Current Password</label>\\r\\n        <div class=\\\"col-12\\\">\\r\\n          <form-control-validation [vControlName]=\\\"'currentPassword'\\\" [vFromGroup]=\\\"changePasswordForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"currentPassword\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"form-group m-form__group row\\\">\\r\\n        <label class=\\\"col-12 col-form-label\\\">New Password</label>\\r\\n        <div class=\\\"col-12\\\">\\r\\n          <form-control-validation [vControlName]=\\\"'newPassword'\\\" [vFromGroup]=\\\"changePasswordForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"newPassword\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"form-group m-form__group row\\\">\\r\\n        <label class=\\\"col-12 col-form-label\\\">Confirm New Password</label>\\r\\n        <div class=\\\"col-12\\\">\\r\\n          <form-control-validation [vControlName]=\\\"'confirmNewPassword'\\\"\\r\\n                                   [VMessages]=\\\"changePasswordFormModel.validationMessage\\\"\\r\\n                                   [vFromGroup]=\\\"changePasswordForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"confirmNewPassword\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">update</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</form>\\r\\n\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormService } from '../../../../core/modules/form/form-service.service';\r\nimport { UserManagementService } from '../../services/user-management.service';\r\nimport { ChangePasswordFormModel } from '../../models/change-password-form';\r\n\r\n@Component({\r\n  selector: 'app-change-password',\r\n  templateUrl: './change-password.component.html'\r\n})\r\nexport class ChangePasswordComponent implements OnInit {\r\n  changePasswordFormModel: ChangePasswordFormModel;\r\n  changePasswordForm: FormGroup;\r\n  @Output() onSubmit: EventEmitter<any> = new EventEmitter();\r\n  @Input() data: any;\r\n\r\n  constructor(\r\n    private userManagementService: UserManagementService,\r\n    private formService: FormService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.changePasswordFormModel = new ChangePasswordFormModel(this.data);\r\n    this.changePasswordForm = this.formService.getFormByModel(this.changePasswordFormModel);\r\n    this.changePasswordForm.setValidators(this.checkPasswords);\r\n  }\r\n\r\n  saveChangePasswordForm() {\r\n    const saveData = {\r\n      currentPassword: this.changePasswordForm.value.currentPassword,\r\n      newPassword: this.changePasswordForm.value.newPassword,\r\n      confirmNewPassword: this.changePasswordForm.value.confirmNewPassword\r\n    };\r\n\r\n    this.onSubmit.emit(saveData);\r\n  }\r\n\r\n  checkPasswords(group: FormGroup) {\r\n    // here we have the 'passwords' group\r\n    let pass = group.controls.newPassword.value;\r\n    let confirmPass = group.controls.confirmNewPassword.value;\r\n\r\n    group\r\n      .get('confirmNewPassword')\r\n      .setErrors(pass === confirmPass ? null : { passwordNotEqual: true });\r\n    return group.errors;\r\n  }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"personalInfoForm\\\" (submit)=\\\"saveChangePasswordForm()\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-6 col-12 form-group m-form__group\\\">\\r\\n          <label class=\\\"col-form-label\\\">First Name</label>\\r\\n          <form-control-validation [vControlName]=\\\"'firstName'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"firstName\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n        <div class=\\\"col-lg-6 col-12 form-group m-form__group\\\">\\r\\n          <label class=\\\"col-form-label\\\">Middle Name</label>\\r\\n          <form-control-validation [vControlName]=\\\"'middleName'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"middleName\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-6 col-12\\\">\\r\\n          <div class=\\\"form-group m-form__group\\\">\\r\\n            <label class=\\\"col-form-label\\\">E-mail</label>\\r\\n            <form-control-validation [vControlName]=\\\"'email'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n              <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"email\\\">\\r\\n            </form-control-validation>\\r\\n          </div>\\r\\n          <div class=\\\"form-group m-form__group\\\">\\r\\n            <label class=\\\"col-form-label\\\">Alternative E-mail</label>\\r\\n            <form-control-validation [vControlName]=\\\"'alternativeEmail'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n              <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"alternativeEmail\\\">\\r\\n            </form-control-validation>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col-12\\\"></div>\\r\\n\\r\\n        <div class=\\\"col-lg-6 col-12 form-group m-form__group\\\">\\r\\n          <label class=\\\"col-form-label\\\">Home Phone Number</label>\\r\\n          <form-control-validation [vControlName]=\\\"'homePhoneNumber'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"homePhoneNumber\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n        <div class=\\\"col-lg-6 col-12 form-group m-form__group\\\">\\r\\n          <label class=\\\"col-form-label\\\">Cell Phone Number</label>\\r\\n          <form-control-validation [vControlName]=\\\"'cellPhoneNumber'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"cellPhoneNumber\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"rol-12\\\">\\r\\n        <hr>\\r\\n      </div>\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12 form-group m-form__group\\\">\\r\\n          <label class=\\\"col-form-label\\\">Address</label>\\r\\n          <form-control-validation [vControlName]=\\\"'address'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"address\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n        <div class=\\\"col-lg-6 col-12 form-group m-form__group\\\">\\r\\n          <label class=\\\"col-form-label\\\">City</label>\\r\\n          <form-control-validation [vControlName]=\\\"'city'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"city\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n        <div class=\\\"col-lg-6 col-12 form-group m-form__group\\\">\\r\\n          <label class=\\\"col-form-label\\\">State</label>\\r\\n          <form-control-validation [vControlName]=\\\"'state'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"state\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n        <div class=\\\"col-lg-6 col-12 form-group m-form__group\\\">\\r\\n          <label class=\\\"col-form-label\\\">Zip</label>\\r\\n          <form-control-validation [vControlName]=\\\"'zip'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"zip\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n        <div class=\\\"col-lg-6 col-12 form-group m-form__group\\\">\\r\\n          <label class=\\\"col-form-label\\\">Country</label>\\r\\n          <form-control-validation [vControlName]=\\\"'country'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"country\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"rol-12\\\">\\r\\n        <hr>\\r\\n      </div>\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-6 col-12 form-group m-form__group\\\">\\r\\n          <label class=\\\"col-form-label\\\">Gander</label>\\r\\n          <form-control-validation [vControlName]=\\\"'gander'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"gander\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-6 col-12 form-group m-form__group\\\">\\r\\n          <label class=\\\"col-form-label\\\">What is your race</label>\\r\\n          <form-control-validation [vControlName]=\\\"'userRace'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"userRace\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n        <div class=\\\"col-lg-6 col-12 form-group m-form__group\\\">\\r\\n          <label class=\\\"col-form-label\\\">Are you Hispanic or Latino</label>\\r\\n          <form-control-validation [vControlName]=\\\"'userIdHispanicOrLatino'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"userIdHispanicOrLatino\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"rol-12\\\">\\r\\n        <hr>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"htd-quote-blog\\\">\\r\\n        Select tree security question and provide answer to them. This information can be used to reset your\\r\\n        password if you forget it. Answers are not case sensitive. They must be different.\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-6 col-12 form-group m-form__group\\\">\\r\\n          <label class=\\\"col-form-label\\\">Security question1</label>\\r\\n          <form-control-validation [vControlName]=\\\"'securityQuestion1'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"securityQuestion1\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n        <div class=\\\"col-lg-6 col-12 form-group m-form__group\\\">\\r\\n          <label class=\\\"col-form-label\\\">Security answer1</label>\\r\\n          <form-control-validation [vControlName]=\\\"'securityAnswer1'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"securityAnswer1\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n        <div class=\\\"col-lg-6 col-12 form-group m-form__group\\\">\\r\\n          <label class=\\\"col-form-label\\\">Security question2</label>\\r\\n          <form-control-validation [vControlName]=\\\"'securityQuestion2'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"securityQuestion2\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n        <div class=\\\"col-lg-6 col-12 form-group m-form__group\\\">\\r\\n          <label class=\\\"col-form-label\\\">Security answer2</label>\\r\\n          <form-control-validation [vControlName]=\\\"'securityAnswer2'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"securityAnswer2\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n        <div class=\\\"col-lg-6 col-12 form-group m-form__group\\\">\\r\\n          <label class=\\\"col-form-label\\\">Security question3</label>\\r\\n          <form-control-validation [vControlName]=\\\"'securityQuestion3'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"securityQuestion3\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n        <div class=\\\"col-lg-6 col-12 form-group m-form__group\\\">\\r\\n          <label class=\\\"col-form-label\\\">Security answer3</label>\\r\\n          <form-control-validation [vControlName]=\\\"'securityAnswer3'\\\" [vFromGroup]=\\\"personalInfoForm\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control m-input\\\" formControlName=\\\"securityAnswer3\\\">\\r\\n          </form-control-validation>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"rol-12\\\">\\r\\n        <hr>\\r\\n      </div>\\r\\n\\r\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">save</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</form>\\r\\n\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormService } from '../../../../core/modules/form/form-service.service';\r\nimport { UserManagementService } from '../../services/user-management.service';\r\nimport { PersonalInfoFormModel } from '../../models/personal-info-form';\r\n\r\n@Component({\r\n  selector: 'app-personal-info',\r\n  templateUrl: './personal-info.component.html'\r\n})\r\nexport class PersonalInfoComponent implements OnInit {\r\n  personalInfoFormModel: PersonalInfoFormModel;\r\n  personalInfoForm: FormGroup;\r\n\r\n  @Output() onSubmit: EventEmitter<any> = new EventEmitter();\r\n  @Input() data: any;\r\n\r\n  constructor(\r\n    private userManagementService: UserManagementService,\r\n    private formService: FormService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.personalInfoFormModel = new PersonalInfoFormModel(this.data);\r\n    this.personalInfoForm = this.formService.getFormByModel(this.personalInfoFormModel);\r\n    // this.personalInfoForm.setValidators(this.checkPasswords)\r\n  }\r\n\r\n  saveChangePasswordForm() {\r\n    const saveData = {\r\n      currentPassword: this.personalInfoForm.value.currentPassword,\r\n      newPassword: this.personalInfoForm.value.newPassword,\r\n      confirmNewPassword: this.personalInfoForm.value.confirmNewPassword\r\n    };\r\n\r\n    this.onSubmit.emit(saveData);\r\n  }\r\n\r\n  checkPasswords(group: FormGroup) {\r\n    let pass = group.controls.newPassword.value;\r\n    let confirmPass = group.controls.confirmNewPassword.value;\r\n\r\n    group\r\n      .get('confirmNewPassword')\r\n      .setErrors(pass === confirmPass ? null : { passwordNotEqual: true });\r\n    return group.errors;\r\n  }\r\n}\r\n","export class AccountRecoveryViewModel {\r\n  username: string;\r\n  email: string;\r\n}\r\n","import { Validators } from '@angular/forms';\r\nimport { CommonFormConstructor } from '../../../core/modules/form/common-form-constructor';\r\n\r\nconst ChangePasswordFormValidation = {\r\n  currentPassword: [Validators.required, Validators.minLength(7)],\r\n  newPassword: [Validators.required],\r\n  confirmNewPassword: [Validators.required]\r\n};\r\n\r\nconst ChangePasswordFormValidationMessage = {\r\n  'confirmNewPassword.passwordNotEqual': 'Confirmed password not equal to password field'\r\n};\r\n\r\nexport class ChangePasswordFormModel extends CommonFormConstructor {\r\n  currentPassword = '';\r\n  newPassword = '';\r\n  confirmNewPassword = '';\r\n\r\n  constructor(data?: any) {\r\n    super();\r\n    this.setData(data);\r\n  }\r\n\r\n  get validationRules() {\r\n    return ChangePasswordFormValidation;\r\n  }\r\n\r\n  get validationMessage() {\r\n    return ChangePasswordFormValidationMessage;\r\n  }\r\n}\r\n","export class ForgotPasswordViewModel {\r\n  id: string;\r\n  email: string;\r\n  method: number;\r\n}\r\n","import { Validators } from '@angular/forms';\r\nimport { CommonFormConstructor } from '../../../core/modules/form/common-form-constructor';\r\n\r\nconst PersonalInfoFormValidation = {\r\n  firstName: [Validators.required],\r\n  lastName: [Validators.required],\r\n  middleName: [Validators.required],\r\n  email: [Validators.required],\r\n  alternativeEmail: [Validators.required],\r\n  homePhoneNumber: [Validators.required],\r\n  cellPhoneNumber: [Validators.required],\r\n  address: [Validators.required],\r\n  city: [Validators.required],\r\n  state: [Validators.required],\r\n  zip: [Validators.required],\r\n  country: [Validators.required],\r\n  gander: [Validators.required],\r\n  userRace: [Validators.required],\r\n  userIdHispanicOrLatino: [Validators.required],\r\n  securityQuestion1: [Validators.required],\r\n  securityAnswer1: [Validators.required],\r\n  securityQuestion2: [Validators.required],\r\n  securityAnswer2: [Validators.required],\r\n  securityQuestion3: [Validators.required],\r\n  securityAnswer3: [Validators.required]\r\n};\r\n\r\nexport class PersonalInfoFormModel extends CommonFormConstructor {\r\n  firstName = '';\r\n  lastName = '';\r\n  middleName = '';\r\n  email = '';\r\n  alternativeEmail = '';\r\n  homePhoneNumber = '';\r\n  cellPhoneNumber = '';\r\n  address = '';\r\n  city = '';\r\n  state = '';\r\n  zip = '';\r\n  country = '';\r\n  gander = '';\r\n  userRace = '';\r\n  userIdHispanicOrLatino = '';\r\n  securityQuestion1 = '';\r\n  securityAnswer1 = '';\r\n  securityQuestion2 = '';\r\n  securityAnswer2 = '';\r\n  securityQuestion3 = '';\r\n  securityAnswer3 = '';\r\n\r\n  constructor(data?: any) {\r\n    super();\r\n    this.setData(data);\r\n  }\r\n\r\n  get validationRules() {\r\n    return PersonalInfoFormValidation;\r\n  }\r\n}\r\n","import {Validators} from '@angular/forms';\r\nimport {CommonFormConstructor} from '../../../core/modules/form/common-form-constructor';\r\nimport {uppercaseValidator} from '../../../core/modules/form/validators/uppercase.validator';\r\nimport {lowercaseValidator} from '../../../core/modules/form/validators/lowercase.validator';\r\nimport {digitValidator} from '../../../core/modules/form/validators/digit.validator';\r\nimport {specialValidator} from '../../../core/modules/form/validators/special.validator';\r\n\r\nconst ResetPasswordFormValidation = {\r\n  password: [\r\n    Validators.required,\r\n    Validators.minLength(8),\r\n    uppercaseValidator,\r\n    lowercaseValidator,\r\n    digitValidator,\r\n    specialValidator\r\n  ],\r\n  confirmPassword: [Validators.required]\r\n};\r\n\r\nexport class ResetPasswordFormModel extends CommonFormConstructor {\r\n\r\n  password = '';\r\n  confirmPassword = '';\r\n\r\n  constructor(data?: any) {\r\n    super();\r\n    this.setData(data);\r\n  }\r\n\r\n  get validationRules() {\r\n    return ResetPasswordFormValidation;\r\n  }\r\n}\r\n","export class ResetPasswordViewModel {\r\n  userId: string;\r\n  email: string;\r\n\r\n  password: string;\r\n  confirmPassword: string;\r\n\r\n  code: string;\r\n}\r\n","module.exports = \"<div class=\\\"m-portlet container\\\">\\r\\n  <div class=\\\"m-portlet__head\\\">\\r\\n    <div class=\\\"m-portlet__head-caption\\\">\\r\\n      <div class=\\\"m-portlet__head-title\\\">\\r\\n        <span class=\\\"m-portlet__head-icon\\\">\\r\\n          <i class=\\\"la la-gear\\\"></i>\\r\\n        </span>\\r\\n        <h3 class=\\\"m-portlet__head-text\\\">\\r\\n          Account Recovery\\r\\n        </h3>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"m-portlet__body\\\">\\r\\n    <div *ngIf=\\\"!optionsLoaded\\\">\\r\\n      <label>Enter your username or email address:</label>\\r\\n      <input class=\\\"form-control\\\" type=\\\"text\\\" [formControl]=\\\"recoveryControl\\\" />\\r\\n      <br />\\r\\n      <button class=\\\"btn btn-brand\\\" (click)=\\\"getOptions()\\\" [disabled]=\\\"!recoveryControl.valid\\\">Submit</button>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"optionsLoaded && !tokenSent\\\">\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <mat-radio-group [formControl]=\\\"recoveryMethod\\\">\\r\\n          <div class=\\\"row\\\" *ngFor=\\\"let option of recoveryOptions\\\">\\r\\n            <mat-radio-button class=\\\"padding-right-5\\\" [value]=\\\"option\\\"></mat-radio-button>\\r\\n            <label>{{methodDescriptions[option] + \\\" at \\\" + recoveryOptionsModel[option]}}</label>\\r\\n          </div>\\r\\n        </mat-radio-group>\\r\\n        <br />\\r\\n        <button class=\\\"btn btn-brand\\\" (click)=\\\"submitForm()\\\" [disabled]=\\\"!recoveryMethod.valid\\\">Submit</button>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"tokenSent\\\">\\r\\n      <h3 class=\\\"m-portlet__body-text\\\">\\r\\n        A link to reset your password was sent to your email.\\r\\n      </h3>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy93ZWIvc3JjL2FwcC9tb2R1bGVzL3VzZXItbWFuYWdlbWVudC9wYWdlcy9hY2NvdW50LXJlY292ZXJ5L2FjY291bnQtcmVjb3ZlcnkuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport * as _ from 'lodash';\r\n\r\nimport {AuthenticationMethodEnum} from \"../../../../shared/enums/authMethodEnum\";\r\nimport { AccountRecoveryViewModel } from '../../models/account-recovery-view.model';\r\nimport { AccountRecoveryOptionsModel } from '../../models/account-recovery-options.model';\r\nimport { ForgotPasswordViewModel } from '../../models/forgot-password-view.model';\r\nimport { UserManagementService } from '../../services/user-management.service';\r\n\r\n@Component({\r\n  selector: 'app-acccount-recovery',\r\n  templateUrl: './account-recovery.component.html',\r\n  styleUrls: ['./account-recovery.component.scss']\r\n})\r\nexport class AccountRecoveryComponent implements OnInit {\r\n  msg: string;\r\n  recoveryControl: FormControl;\r\n  recoveryMethod: FormControl;\r\n\r\n  optionsLoaded: boolean = false;\r\n  recoveryOptions: string[];\r\n  recoveryOptionsModel: AccountRecoveryOptionsModel;\r\n\r\n  tokenSent: boolean = false;\r\n\r\n  methodDescriptions = {\r\n    email: 'Primary email',\r\n    email2: 'Secondary email',\r\n    phone: 'Phone number'\r\n  };\r\n\r\n  constructor(\r\n    private userService: UserManagementService,\r\n    private activatedRoute: ActivatedRoute,\r\n    private cdRef: ChangeDetectorRef,\r\n    private toastr: ToastrService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.recoveryControl = new FormControl(null, Validators.required);\r\n    this.recoveryMethod = new FormControl(null, Validators.required);\r\n    this.recoveryMethod.valueChanges.subscribe(v => console.log(v));\r\n\r\n    this.activatedRoute.queryParams.subscribe(params => {\r\n      //this.userId = params['id'];\r\n      //this.code = params['code'];\r\n    });\r\n  }\r\n\r\n  getRecoveryOptions(data: AccountRecoveryOptionsModel) {\r\n    return Object.keys(data).filter(k => data[k]);\r\n  }\r\n\r\n  getOptions() {\r\n    const model = new AccountRecoveryViewModel();\r\n    const recoveryParam = this.recoveryControl.value;\r\n\r\n    if (recoveryParam.includes('@')) {\r\n      model.email = recoveryParam;\r\n    } else {\r\n      model.username = recoveryParam;\r\n    }\r\n\r\n    this.userService.recoveryOptions(model).subscribe((res: AccountRecoveryOptionsModel) => {\r\n      console.log(res);\r\n      if (res.success) {\r\n        this.recoveryOptionsModel = _.cloneDeep(res);\r\n        delete res['success'] && delete res['id'];\r\n        this.recoveryOptions = this.getRecoveryOptions(res);\r\n        this.optionsLoaded = true;\r\n        if (!this.cdRef['destroyed']) this.cdRef.detectChanges();\r\n      } else {\r\n        this.toastr.error('Could not verify your username or email address');\r\n      }\r\n    });\r\n  }\r\n\r\n  getAuthMethod(type: string): number {\r\n    switch (type) {\r\n      case 'email':\r\n        return AuthenticationMethodEnum.EMAIL;\r\n      case 'email2':\r\n        return AuthenticationMethodEnum.EMAIL2;\r\n      case 'phone':\r\n        return AuthenticationMethodEnum.PHONE;\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n\r\n  submitForm() {\r\n    console.log(this.recoveryOptionsModel);\r\n    let model = new ForgotPasswordViewModel();\r\n    model.id = this.recoveryOptionsModel.id;\r\n    model.method = this.getAuthMethod(this.recoveryMethod.value);\r\n    this.userService.forgotPassword(model).subscribe(res => {\r\n      console.log(res);\r\n      this.tokenSent = true;\r\n      if (!this.cdRef['destroyed']) this.cdRef.detectChanges();\r\n    });\r\n  }\r\n}\r\n","module.exports = \"<div class=\\\"m-portlet\\\">\\r\\n  <div class=\\\"m-portlet__head\\\">\\r\\n    <div class=\\\"m-portlet__head-caption\\\">\\r\\n      <div class=\\\"m-portlet__head-title\\\">\\r\\n        <span class=\\\"m-portlet__head-icon\\\">\\r\\n          <i class=\\\"la la-gear\\\"></i>\\r\\n        </span>\\r\\n        <h3 class=\\\"m-portlet__head-text\\\">\\r\\n          Confirm Registration\\r\\n        </h3>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"m-portlet__body\\\">\\r\\n    <div *ngIf=\\\"emailConfirmed && !tokenValidated\\\">\\r\\n      <input class=\\\"form-control\\\" type=\\\"text\\\" [formControl]=\\\"tokenControl\\\" />\\r\\n      <br />\\r\\n      <button class=\\\"btn btn-brand\\\" (click)=\\\"submitForm()\\\">Submit</button>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"tokenValidated\\\">\\r\\n      <h3 class=\\\"m-portlet__body-text\\\">\\r\\n        Thank you for confirming your account!\\r\\n      </h3>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy93ZWIvc3JjL2FwcC9tb2R1bGVzL3VzZXItbWFuYWdlbWVudC9wYWdlcy9jb25maXJtLXJlZ2lzdHJhdGlvbi9jb25maXJtLXJlZ2lzdHJhdGlvbi5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { UserManagementService } from '../../services/user-management.service';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n  selector: 'app-confirm-registration',\r\n  templateUrl: './confirm-registration.component.html',\r\n  styleUrls: ['./confirm-registration.component.scss']\r\n})\r\nexport class ConfirmRegistrationComponent implements OnInit {\r\n  userId: string;\r\n  code: string = '';\r\n  msg: string;\r\n\r\n  emailConfirmed: boolean = false;\r\n\r\n  tokenControl: FormControl;\r\n  tokenValidated: boolean = false;\r\n\r\n  constructor(\r\n    private userService: UserManagementService,\r\n    private activatedRoute: ActivatedRoute,\r\n    private cdRef: ChangeDetectorRef,\r\n    private toastr: ToastrService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.tokenControl = new FormControl();\r\n    //this.tokenControl.valueChanges.subscribe(value => console.log(value));\r\n\r\n    this.activatedRoute.queryParams.subscribe(params => {\r\n      this.userId = params['id'];\r\n      this.code = params['code'];\r\n\r\n      this.userService.confirmRegistration(this.userId, this.code).subscribe((data: any) => {\r\n        if (data.success) {\r\n          this.emailConfirmed = true;\r\n          if (!this.cdRef['destroyed']) this.cdRef.detectChanges();\r\n        } else {\r\n          alert('Error: Email could not be verified.');\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  submitForm() {\r\n    console.log(this.userId, this.code);\r\n    console.log(this.tokenControl.value);\r\n\r\n    const token = this.tokenControl.value;\r\n    this.userService.confirmOTP(this.userId, token).subscribe((res: any) => {\r\n      if (res.success) {\r\n        //this.toastr.success(res.message);\r\n        this.tokenValidated = true;\r\n        if (!this.cdRef['destroyed']) this.cdRef.detectChanges();\r\n      } else {\r\n        this.toastr.error(res.message);\r\n      }\r\n    });\r\n  }\r\n}\r\n","module.exports = \"<div class=\\\"m-portlet\\\">\\r\\n  <div class=\\\"m-portlet__head\\\">\\r\\n    <div class=\\\"m-portlet__head-caption\\\">\\r\\n      <div class=\\\"m-portlet__head-title\\\">\\r\\n        <span class=\\\"m-portlet__head-icon\\\">\\r\\n          <i class=\\\"la la-gear\\\"></i>\\r\\n        </span>\\r\\n        <h3 class=\\\"m-portlet__head-text\\\">\\r\\n          Reset Password\\r\\n        </h3>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"m-portlet__body\\\">\\r\\n    <div *ngIf=\\\"!tokenValidated\\\">\\r\\n        <div class=\\\"input-group mb-3\\\">\\r\\n          <input\\r\\n            class=\\\"form-control\\\"\\r\\n            type=\\\"password\\\"\\r\\n            [formControl]=\\\"tokenControl\\\"/>\\r\\n        </div>\\r\\n      <br />\\r\\n      <button class=\\\"btn btn-brand\\\" (click)=\\\"validateToken()\\\" [disabled]=\\\"!tokenControl.valid\\\">Submit</button>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"tokenValidated && !passwordReset\\\">\\r\\n      <form [formGroup]=\\\"resetPasswordForm\\\" (submit)=\\\"resetPassword()\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-4 center\\\">\\r\\n            <div class=\\\"form-group m-form__group row\\\">\\r\\n              <label class=\\\"col-12 col-form-label\\\">Password</label>\\r\\n              <div class=\\\"col-12\\\">\\r\\n                <form-control-validation\\r\\n                  [vControlName]=\\\"'password'\\\"\\r\\n                  [vFromGroup]=\\\"resetPasswordForm\\\"\\r\\n                  [vHideErrorMessages]=\\\"true\\\">\\r\\n                  <app-condition-input\\r\\n                    [config]=\\\"passwordInputConditionConfig\\\"\\r\\n                    [input]=\\\"resetPasswordForm.get('password')\\\">\\r\\n                    <div class=\\\"input-group mb-3\\\">\\r\\n                      <input\\r\\n                        [type]=\\\"inputType\\\"\\r\\n                        class=\\\"form-control m-input\\\"\\r\\n                        formControlName=\\\"password\\\"\\r\\n                        [ngbPopover]=\\\"validationPopoverBody\\\"\\r\\n                        [popoverTitle]=\\\"validationPopoverTitle\\\"\\r\\n                        [autoClose]=\\\"false\\\"\\r\\n                        triggers=\\\"manual\\\"\\r\\n                        #popOver=\\\"ngbPopover\\\"\\r\\n                        (input)=\\\"onInputChange($event, popOver)\\\"/>\\r\\n                      <div class=\\\"input-group-append\\\">\\r\\n                        <span class=\\\"input-group-text\\\" (click)=\\\"toggleInputType()\\\">\\r\\n                          {{ (inputType==='text') ? 'Hide' : 'Show' }}\\r\\n                        </span>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </app-condition-input>\\r\\n                </form-control-validation>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group m-form__group row\\\">\\r\\n              <label class=\\\"col-12 col-form-label\\\">Re-type password</label>\\r\\n              <div class=\\\"col-12\\\">\\r\\n                <form-control-validation [vControlName]=\\\"'confirmPassword'\\\" [vFromGroup]=\\\"resetPasswordForm\\\">\\r\\n                  <app-condition-input\\r\\n                    [config]=\\\"confirmPasswordInputConditionConfig\\\"\\r\\n                    [display]=\\\"!!resetPasswordForm.get('confirmPassword').value.length\\\"\\r\\n                    [input]=\\\"resetPasswordForm.get('password').value === resetPasswordForm.get('confirmPassword').value\\\">\\r\\n                    <input type=\\\"text\\\" class=\\\"form-control m-input\\\"\\r\\n                      formControlName=\\\"confirmPassword\\\">\\r\\n                  </app-condition-input>\\r\\n                </form-control-validation>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"resetPasswordForm.invalid\\\">\\r\\n              Reset Password\\r\\n            </button>\\r\\n          </div>\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"passwordReset\\\">\\r\\n      <h3 class=\\\"m-portlet__body-text\\\">\\r\\n        Password reset successfully.\\r\\n      </h3>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<ng-template #validationPopoverTitle><p>Choose a strong password</p></ng-template>\\r\\n<ng-template #validationPopoverBody>\\r\\n  <ul class=\\\"popover-list\\\">\\r\\n    <li [ngClass]=\\\"{valid: isFieldValid('uppercase')}\\\">One uppercase letter</li>\\r\\n    <li [ngClass]=\\\"{valid: isFieldValid('lowercase')}\\\">One lowercase letter</li>\\r\\n    <li [ngClass]=\\\"{valid: isFieldValid('digit')}\\\">One number</li>\\r\\n    <li [ngClass]=\\\"{valid: isFieldValid('special')}\\\">One special character</li>\\r\\n    <li [ngClass]=\\\"{valid: isFieldValid('minlength')}\\\">At least 8 characters</li>\\r\\n  </ul>\\r\\n</ng-template>\\r\\n\"","module.exports = \"@charset \\\"UTF-8\\\";\\n:host ul {\\n  margin: 0;\\n  padding: 0;\\n  list-style: none; }\\n:host li.valid {\\n  color: green; }\\n:host li:before {\\n  display: inline-block;\\n  content: '•';\\n  width: 16px; }\\n:host li.valid:before {\\n  content: '✓'; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2plY3RzL3dlYi9zcmMvYXBwL21vZHVsZXMvdXNlci1tYW5hZ2VtZW50L3BhZ2VzL3Jlc2V0LXBhc3N3b3JkL3Jlc2V0LXBhc3N3b3JkLmNvbXBvbmVudC5zY3NzIiwicHJvamVjdHMvd2ViL3NyYy9hcHAvbW9kdWxlcy91c2VyLW1hbmFnZW1lbnQvcGFnZXMvcmVzZXQtcGFzc3dvcmQvQzpcXFRGU1xcRENBXFxQdWJsaWNcXFB1YmxpY1dlYi9wcm9qZWN0c1xcd2ViXFxzcmNcXGFwcFxcbW9kdWxlc1xcdXNlci1tYW5hZ2VtZW50XFxwYWdlc1xccmVzZXQtcGFzc3dvcmRcXHJlc2V0LXBhc3N3b3JkLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQjtBQ0FoQjtFQUdJLFNBQVM7RUFDVCxVQUFVO0VBQ1YsZ0JBQWdCLEVBQUE7QUFMcEI7RUFRSSxZQUFZLEVBQUE7QUFSaEI7RUFXSSxxQkFBcUI7RUFDckIsWUFBUztFQUNULFdBQVcsRUFBQTtBQWJmO0VBZ0JJLFlBQVMsRUFBSSIsImZpbGUiOiJwcm9qZWN0cy93ZWIvc3JjL2FwcC9tb2R1bGVzL3VzZXItbWFuYWdlbWVudC9wYWdlcy9yZXNldC1wYXNzd29yZC9yZXNldC1wYXNzd29yZC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIkBjaGFyc2V0IFwiVVRGLThcIjtcbjpob3N0IHVsIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBsaXN0LXN0eWxlOiBub25lOyB9XG5cbjpob3N0IGxpLnZhbGlkIHtcbiAgY29sb3I6IGdyZWVuOyB9XG5cbjpob3N0IGxpOmJlZm9yZSB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgY29udGVudDogJ+KAoic7XG4gIHdpZHRoOiAxNnB4OyB9XG5cbjpob3N0IGxpLnZhbGlkOmJlZm9yZSB7XG4gIGNvbnRlbnQ6ICfinJMnOyB9XG4iLCI6aG9zdCB7XG5cbiAgdWwge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIH1cbiAgbGkudmFsaWQge1xuICAgIGNvbG9yOiBncmVlbjtcbiAgfVxuICBsaTpiZWZvcmUge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBjb250ZW50OiAn4oCiJztcbiAgICB3aWR0aDogMTZweDtcbiAgfVxuICBsaS52YWxpZDpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICfinJMnO1xuICB9XG59Il19 */\"","import { Component, OnInit, ChangeDetectorRef, ViewChild, ElementRef} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\nimport {FormService} from \"../../../../core/modules/form/form-service.service\";\nimport { UserManagementService } from '../../services/user-management.service';\nimport { ResetPasswordFormModel } from '../../models/reset-password-form.model';\nimport { ResetPasswordViewModel } from '../../models/reset-password-view.model';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit {\n  @ViewChild('popOver') popOver: ElementRef;\n\n  public inputType: string = 'password';\n\n  public tokenValidators = [\n    Validators.required,\n    Validators.pattern(/\\d{6}/)\n  ]\n\n  //public passwordValidators = [\n  //  Validators.required,\n  //  Validators.minLength(8),\n  //  // Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).*'),\n  //  Validators.pattern('(?=.*[a-z]).*'),\n  //  Validators.pattern('(?=.*[A-Z]).*'),\n  //  Validators.pattern('(?=.*[0-9]).*'),\n  //];\n  userId: string;\n  code: string = '';\n  msg: string;\n\n  tokenControl: FormControl;\n  tokenValidated: boolean = false;\n\n  resetPasswordForm: FormGroup;\n  passwordReset: boolean;\n\n\n  confirmPasswordInputConditionConfig = [\n    { condition: true, validatorText: 'match' },\n    { condition: false, validatorText: 'no match' }\n  ];\n  passwordInputConditionConfig = [\n    { condition: [Validators.maxLength(0)], validatorText: 'not strong' },\n    { condition: [Validators.maxLength(15)], validatorText: 'strong' },\n    { condition: [Validators.maxLength(25)], validatorText: 'super strong' }\n  ];\n\n  public toggleInputType(): void {\n    this.inputType = (this.inputType === 'password') ? 'text' : 'password';\n  }\n\n  constructor(\n    private userService: UserManagementService,\n    private activatedRoute: ActivatedRoute,\n    private cdRef: ChangeDetectorRef,\n    private toastr: ToastrService,\n    private formService: FormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.tokenControl = new FormControl('', Validators.compose(this.tokenValidators));\n    //this.tokenControl.valueChanges.subscribe(value => console.log(value));\n\n    this.resetPasswordForm = this.formService.getFormByModel(new ResetPasswordFormModel());\n\n    this.activatedRoute.queryParams.subscribe(params => {\n      this.userId = params['id'];\n      this.code = params['code']; \n    });\n    console.log(this);\n  }\n\n  validateToken() {\n    console.log(this.userId, this.code);\n    console.log(this.tokenControl.value);\n\n    const token = this.tokenControl.value;\n    this.userService.confirmTwoFactorAuthentication(this.userId, token)\n      .subscribe((res: any) => {\n        if (res.success) {\n          // this.toastr.success(res.message);\n          this.tokenValidated = true;\n          if(!this.cdRef['destroyed']) this.cdRef.detectChanges();\n        }\n        else {\n          this.toastr.error(res.message);\n        }\n      });\n  }\n\n  resetPassword() {\n    console.log(this.resetPasswordForm.value);\n    let model = new ResetPasswordViewModel();\n    model.userId = this.userId;\n    model.password = this.resetPasswordForm.get('password').value;\n    model.confirmPassword = this.resetPasswordForm.get('confirmPassword').value;\n\n    this.userService.resetPassword(model, this.code).subscribe(result => {\n      if (result.success) {\n        this.passwordReset = true;\n        if (!this.cdRef['destroyed']) this.cdRef.detectChanges();\n      }\n      else {\n        this.toastr.error(result.message);\n      }\n    });\n  }\n\n  public onInputChange(event, popOver): void {\n    if (event.target.value && !popOver.isOpen()) {\n      popOver.open();\n      return;\n    } else if (!event.target.value && popOver.isOpen()) {\n      popOver.close();\n      return;\n    }\n  }\n\n  public isFieldValid(type): boolean {\n    const fieldName = (type === 'minlength') ? type : `${type}Validator`\n    return (this.resetPasswordForm.get('password').errors && this.resetPasswordForm.get('password').errors[fieldName]) \n      ? false\n      : true;\n  }\n}\n","module.exports = \"<div class=\\\"m-portlet\\\">\\r\\n  <div class=\\\"m-portlet__head\\\">\\r\\n    <div class=\\\"m-portlet__head-caption\\\">\\r\\n      <div class=\\\"m-portlet__head-title\\\">\\r\\n        <span class=\\\"m-portlet__head-icon\\\">\\r\\n          <i class=\\\"la la-gear\\\"></i>\\r\\n        </span>\\r\\n        <h3 class=\\\"m-portlet__head-text\\\">\\r\\n          My Account\\r\\n        </h3>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"m-portlet__body pt-2\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n        <ngb-tabset>\\r\\n          <ngb-tab title=\\\"Personal Info\\\">\\r\\n            <ng-template ngbTabContent>\\r\\n              <app-personal-info></app-personal-info>\\r\\n            </ng-template>\\r\\n          </ngb-tab>\\r\\n          <ngb-tab title=\\\"Change Password\\\">\\r\\n            <ng-template ngbTabContent>\\r\\n              <app-change-password (onSubmit)=\\\"onSubmitChangePasswordForm($event)\\\"></app-change-password>\\r\\n            </ng-template>\\r\\n          </ngb-tab>\\r\\n        </ngb-tabset>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy93ZWIvc3JjL2FwcC9tb2R1bGVzL3VzZXItbWFuYWdlbWVudC9wYWdlcy91c2VyLWFjY291bnQvdXNlci1hY2NvdW50LmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormService } from '../../../../core/modules/form/form-service.service';\r\nimport { UserManagementService } from '../../services/user-management.service';\r\n\r\n@Component({\r\n  selector: 'app-user-account',\r\n  templateUrl: './user-account.component.html',\r\n  styleUrls: ['./user-account.component.scss']\r\n})\r\nexport class UserAccountComponent implements OnInit {\r\n  constructor(\r\n    private userManagementService: UserManagementService,\r\n    private formService: FormService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    //this.userManagementService.getUserRegister().subscribe(v => {\r\n    //  console.log(v);\r\n    //});\r\n    // this.userRegistrationForm = this.formService.getFormByModel(new UserRegistrationFormModel());\r\n  }\r\n\r\n  onSubmitChangePasswordForm(data) {\r\n    console.log(data);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { IdentityApiService } from '../../../core/services/identity-api.service';\r\nimport { RegisterViewModel } from '../models/register-view.model';\r\nimport { AccountRecoveryViewModel } from '../models/account-recovery-view.model';\r\nimport { ForgotPasswordViewModel } from '../models/forgot-password-view.model';\r\nimport { ResetPasswordComponent } from '../pages/reset-password/reset-password.component';\r\nimport { ResetPasswordViewModel } from '../models/reset-password-view.model';\r\n\r\n@Injectable()\r\nexport class UserManagementService {\r\n  constructor(private identityApiService: IdentityApiService) {}\r\n\r\n  getUserRegister() {\r\n    return this.identityApiService.get('Account/Register');\r\n  }\r\n\r\n  userExists(uname: string, email: string, phone: string, email2: string) {\r\n    return this.identityApiService.getAnonymous(\r\n      'Manage/UserExists?uname=' +\r\n        uname +\r\n        '&email=' +\r\n        email +\r\n        '&phone=' +\r\n        phone +\r\n        '&email2=' +\r\n        email2\r\n    );\r\n  }\r\n\r\n  confirmRegistration(id: string, code: string) {\r\n    return this.identityApiService.getAnonymous(\r\n      `Account/ConfirmEmail?id=${id}&code=${decodeURIComponent(code)}`\r\n    );\r\n  }\r\n\r\n  confirmOTP(id: string, token: string) {\r\n    return this.identityApiService.postAnonymous('Account/ConfirmOTP', { id: id, token: token });\r\n  }\r\n\r\n  confirmTwoFactorAuthentication(id: string, token: string) {\r\n    return this.identityApiService.postAnonymous('Account/ConfirmTwoFactorAuthentication', {\r\n      id: id,\r\n      token: token\r\n    });\r\n  }\r\n\r\n  recoveryOptions(model: AccountRecoveryViewModel) {\r\n    return this.identityApiService.postAnonymous('Account/RecoveryOptions', model);\r\n  }\r\n\r\n  forgotPassword(model: ForgotPasswordViewModel) {\r\n    return this.identityApiService.postAnonymous('Account/ForgotPassword', model);\r\n  }\r\n\r\n  resetPassword(model: ResetPasswordViewModel, code: string) {\r\n    return this.identityApiService.postAnonymous(`Account/ResetPassword?code=${code}`, model);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { UserManagementComponent } from './user-management.component';\r\nimport { UserAccountComponent } from './pages/user-account/user-account.component';\r\nimport { ConfirmRegistrationComponent } from './pages/confirm-registration/confirm-registration.component';\r\nimport { AccountRecoveryComponent } from './pages/account-recovery/account-recovery.component';\r\nimport { ResetPasswordComponent } from './pages/reset-password/reset-password.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UserManagementComponent,\r\n    children: [\r\n      {\r\n        path: 'account',\r\n        component: UserAccountComponent\r\n      },\r\n      {\r\n        path: 'confirm',\r\n        component: ConfirmRegistrationComponent\r\n      },\r\n      {\r\n        path: 'recovery',\r\n        component: AccountRecoveryComponent\r\n      },\r\n      {\r\n        path: 'reset',\r\n        component: ResetPasswordComponent\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    path: '**',\r\n    redirectTo: 'dashboard'\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UserManagementRoutingModule {}\r\n","module.exports = \"<div class=\\\"container\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n      <div class=\\\"pt-5 pb-4\\\">\\r\\n        Menu: &nbsp;\\r\\n        <a routerLink=\\\"/user-management/reset\\\">reset</a> &nbsp;/&nbsp;\\r\\n        <a routerLink=\\\"/user-management/confirm\\\">confirm</a> &nbsp;/&nbsp;\\r\\n        <a routerLink=\\\"/user-management/account\\\">account</a> &nbsp;/&nbsp;\\r\\n        <a routerLink=\\\"/user-management/recovery\\\">recovery</a> &nbsp;/&nbsp;\\r\\n      </div>\\r\\n\\r\\n      <router-outlet></router-outlet>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy93ZWIvc3JjL2FwcC9tb2R1bGVzL3VzZXItbWFuYWdlbWVudC91c2VyLW1hbmFnZW1lbnQuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnDestroy, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  templateUrl: './user-management.component.html',\r\n  styleUrls: ['./user-management.component.scss']\r\n})\r\nexport class UserManagementComponent implements OnInit, OnDestroy {\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnDestroy() {}\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\n\r\nimport {\r\n  MatButtonModule, MatCardModule, MatCheckboxModule, MatChipsModule, MatDatepickerModule, MatExpansionModule,\r\n  MatFormFieldModule, MatIconModule, MatInputModule, MatMenuModule, MatPaginatorModule, MatSelectModule,\r\n  MatSortModule, MatStepperModule, MatTableModule, MatTabsModule, MatRadioModule\r\n} from '@angular/material';\r\n\r\nimport {NgbTabsetModule, NgbPopoverModule, NgbAlertModule} from \"@ng-bootstrap/ng-bootstrap\";\r\n\r\nimport {LoaderModule} from '../../shared/components/loader/loader.module';\r\nimport {FormModule} from '../../core/modules/form/form.module';\r\nimport {CoreModule} from \"../../core/core.module\";\r\n\r\nimport {UserManagementService} from './services/user-management.service';\r\nimport {UserManagementComponent} from './user-management.component';\r\nimport {UserManagementRoutingModule} from './user-management-routing.module';\r\nimport {UserAccountComponent} from \"./pages/user-account/user-account.component\";\r\nimport {ChangePasswordComponent} from \"./components/change-password/change-password.component\";\r\nimport {PersonalInfoComponent} from \"./components/personal-info/personal-info.component\";\r\nimport {ConfirmRegistrationComponent} from './pages/confirm-registration/confirm-registration.component';\r\nimport {AccountRecoveryComponent} from './pages/account-recovery/account-recovery.component';\r\nimport {ResetPasswordComponent} from './pages/reset-password/reset-password.component';\r\n\r\n\r\nconst MaterialModules = [\r\n  MatButtonModule, MatPaginatorModule, MatTableModule, MatFormFieldModule,\r\n  MatInputModule, MatSortModule, MatCheckboxModule, MatIconModule, MatMenuModule,\r\n  MatCardModule, MatStepperModule, MatExpansionModule, MatDatepickerModule,\r\n  MatChipsModule, MatTabsModule, MatSelectModule, MatRadioModule\r\n];\r\nconst BootstrapModules = [\r\n  NgbTabsetModule, NgbPopoverModule, NgbAlertModule\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    CoreModule,\r\n    ReactiveFormsModule,\r\n    ...MaterialModules,\r\n    ...BootstrapModules,\r\n    LoaderModule,\r\n    UserManagementRoutingModule,\r\n    FormModule\r\n  ],\r\n  declarations: [\r\n    UserManagementComponent,\r\n    ConfirmRegistrationComponent,\r\n    AccountRecoveryComponent,\r\n    UserAccountComponent,\r\n    ChangePasswordComponent,\r\n    ResetPasswordComponent,\r\n    PersonalInfoComponent,\r\n  ],\r\n  providers: [\r\n    UserManagementService,\r\n  ],\r\n  entryComponents: []\r\n})\r\n\r\nexport class UserManagementModule {\r\n}\r\n"],"sourceRoot":""}